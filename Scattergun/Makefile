# Copyright 2015-2016 Digital Aggregates Corporation, Colorado, USA.
# "Digital Aggregates Corporation" is a registered trademark.
# Licensed under the terms of the GNU GPL v2.
# https://github.com/coverclock/com-diag-scattergun
# mailto:coverclock@diag.com

################################################################################

PROJECT=scattergun

ROOT=$(HOME)/src

USNISTGOV_ROOT=$(ROOT)/usnistgov/SP800-90B_EntropyAssessment
QUANTIS_ROOT=$(ROOT)/idq-quantis

OUT=out/host/bin

################################################################################

ALL  = $(OUT)/setup
ALL += $(OUT)/bytes
ALL += $(OUT)/rate
ALL += $(OUT)/cmrand48
ALL += $(OUT)/crandom
#ALL += $(OUT)/quantistool
ALL += $(OUT)/seed
#ALL += $(OUT)/seventool
#ALL += $(OUT)/seventool-binary
#ALL += $(OUT)/seventool-mnemonic
ALL += $(OUT)/characterize.sh
ALL += $(OUT)/consume.sh
ALL += $(OUT)/entropy.sh
ALL += $(OUT)/monitor.sh
ALL += $(OUT)/onernginit.sh
ALL += $(OUT)/scattergun.sh
ALL += $(OUT)/truerngd.sh

all:	$(ALL)

clean:
	rm -rf $(ALL)

.PHONY: all clean

################################################################################

# Continuously output eight-bit binary bytes with the value zero. If an
# argument is specified, a byte with that value is output instead.

$(OUT)/bytes:	src/bytes.c
	$(CC) $(CFLAGS) -o $@ $^ ${LDFLAGS}

################################################################################

# Continuously output 32-bit binary numbers generated by the C library's
# mrand48(3) function. These numbers will range in value from -2^31 to 2^31. If
# an argument is specified, it is used to seed the pseudo-random number
# generator.

$(OUT)/cmrand48:	src/cmrand48.c
	$(CC) $(CFLAGS) -o $@ $^ ${LDFLAGS}

################################################################################

# Continuously output 32-bit binary numbers generated by the C library's
# random(3) function. These numbers will range in value from 0 to RAND_MAX,
# which on one of my Ubuntu 14.04 systems is defined in <stdlib.h> to be
# 2,147,483,647 or 0x7fffffff. If an argument is specified, it is used to seed
# the pseudo-random number generator.

$(OUT)/crandom:	src/crandom.c
	$(CC) $(CFLAGS) -o $@ $^ ${LDFLAGS}

################################################################################

# Continuously reads data from a Quantis hardware entropy generator,
# manufactured by ID Quantique, and writes it to standard output, or to a
# specified file system path.

QUANTIS_INCPATH=$(QUANTIS_ROOT)/Libs-Apps/Quantis
QUANTIS_LIBPATH=$(QUANTIS_ROOT)/Libs-Apps/build/Quantis

QUANTIS_CFLAGS += -I$(QUANTIS_INCPATH)
#QUANTIS_LDFLAGS += -L$(QUANTIS_LIBPATH)
#QUANTIS_LDFLAGS += -lQuantis
QUANTIS_LDFLAGS += $(QUANTIS_LIBPATH)/libQuantis.a
QUANTIS_LDFLAGS += -lusb-1.0
QUANTIS_LDFLAGS += -lpthread

$(OUT)/quantistool: src/quantistool.c
	$(CC) $(CFLAGS) $(QUANTIS_CFLAGS) -o $@ $^ $(LDFLAGS) $(QUANTIS_LDFLAGS)

################################################################################

# Continuously reads thirty-two bits of entropy using the rdrand or rdseed
# instructions available on various Intel processors such as certain models of
# the i7 and writes it to standard output, or to a specified file system path.

$(OUT)/seventool:	$(OUT)/seventool-mnemonic
	cp $^ $@

$(OUT)/seventool-binary: src/seventool.c
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

SEVEN_MNEMONIC += -DSCATTERGUN_HAS_RDRAND_MNEMONIC
SEVEN_MNEMONIC += -DSCATTERGUN_HAS_RDSEED_MNEMONIC

$(OUT)/seventool-mnemonic: src/seventool.c
	$(CC) $(CFLAGS) $(SEVEN_MNEMONIC) -o $@ $^ $(LDFLAGS)

SEVEN_INTRINSIC += -DSCATTERGUN_HAS_RDRAND_INTRINSIC
SEVEN_INTRINSIC += -DSCATTERGUN_HAS_RDSEED_INTRINSIC

$(OUT)/seventool-intrinsic: src/seventool.c
	$(CC) $(CFLAGS) $(SEVEN_INTRINSIC) -o $@ $^ $(LDFLAGS)

SEVEN_INLINE += -DSCATTERGUN_HAS_RDRAND_INLINE
SEVEN_INLINE += -DSCATTERGUN_HAS_RDSEED_INTRINSIC

$(OUT)/seventool-inline: src/seventool.c
	$(CC) $(CFLAGS) $(SEVEN_INLINE) -o $@ $^ $(LDFLAGS)

################################################################################

# Measures the sustained and peak rates of a data source. Optionally outputs
# a comma separated value (CSV) file of performance metrics with the specified
# period.

$(OUT)/rate:	src/rate.c
	$(CC) $(CFLAGS) -o $@ $^ ${LDFLAGS}

################################################################################

# Generate an unsigned integer (-i) or an unsigned long (-l) seed.

$(OUT)/seed:	src/seed.c
	$(CC) $(CFLAGS) -o $@ $^ ${LDFLAGS}

################################################################################

$(OUT)/characterize.sh:	bin/characterize.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/consume.sh:	bin/consume.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/entropy.sh:	bin/entropy.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/monitor.sh:	bin/monitor.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/onernginit.sh:	bin/onernginit.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/scattergun.sh:	bin/scattergun.sh
	cp $^ $@
	chmod 775 $@

$(OUT)/truerngd.sh:	bin/truerngd.sh
	cp $^ $@
	chmod 775 $@


################################################################################

$(OUT)/setup:
	cp /dev/null $@
	echo export PATH=$(shell pwd)/$(OUT):$(USNISTGOV_ROOT):$(PATH) >> $@
	echo export LD_LIBRARY_PATH=$(QUANTIS_LIBPATH):$(LD_LIBRARY_PATH) >> $@

export PATH:=$(shell pwd)/$(OUT):$(USNISTGOV_ROOT):$(PATH)
export LD_LIBRARY_PATH:=$(QUANTIS_LIBPATH):$(LD_LIBRARY_PATH)

################################################################################
# "Silver"
# Dell Inspiron 530
# Intel Core 2 Q6600 2.4GHz x4
# Ubuntu 14.04 "trusty"
# Linux 3.13.0
# gcc 4.8.2
################################################################################

TARGET=silver

################################################################################

# TrueRNGpro
# ublt.it
# US$99.00
# http://ubld.it/products/truerngpro
# 3.2Mbps
# USB
# semiconductor avalanche effect

TRUERNGPRO:=$(PROJECT)_$(TARGET)_TrueRNGpro

$(TRUERNGPRO):	/dev/TrueRNGpro
	mkdir -p $(TRUERNGPRO)
	( dd if=/dev/TrueRNGpro | scattergun.sh $(TRUERNGPRO) ) > $(TRUERNGPRO)/scattergun.log 2>&1

################################################################################

# Quantis-USB-4M
# ID Quantique
# Euro$990.00 (US$1100.00)
# http://www.idquantique.com/random-number-generation/quantis-random-number-generator/
# 4Mbps
# USB
# beam splitter with photon counter

QUANTIS:=$(PROJECT)_$(TARGET)_quantis

$(QUANTIS):	src/quantistool
	mkdir -p $(QUANTIS)
	( quantistool -v | scattergun.sh $(QUANTIS) ) > $(QUANTIS)/scattergun.log 2>&1

################################################################################

# OneRNG
# Moonbase Otago
# US$40.00
# http://onerng.info
# 350Kbps
# USB
# semiconductor avalanche effect (and optionally atmospheric noise)

ONERNG:=$(PROJECT)_$(TARGET)_OneRNG

$(ONERNG):	/dev/OneRNG
	mkdir -p $(ONERNG)
	( dd if=/dev/OneRNG | scattergun.sh $(ONERNG) ) > $(ONERNG)/scattergun.log 2>&1

################################################################################

# drivers/char/random.c

URANDOM:=$(PROJECT)_$(TARGET)_urandom

$(URANDOM):	/dev/urandom
	mkdir -p $(URANDOM)
	( dd if=/dev/urandom | scattergun.sh $(URANDOM) ) > $(URANDOM)/scattergun.log 2>&1

################################################################################

# drivers/char/random.c

RANDOM:=$(PROJECT)_$(TARGET)_random

$(RANDOM):	/dev/random
	mkdir -p $(RANDOM)
	( dd if=/dev/random | scattergun.sh $(RANDOM) ) > $(RANDOM)/scattergun.log 2>&1

################################################################################
# "Betty"
# Raspberry Pi 2 Model B v1.1
# Broadcom BCM2836 Cortex-A7 ARMv7 x4
# Raspbian (Debian) 7.8
# Linux 3.8.11
# gcc 4.6.3
################################################################################

TARGET=betty

################################################################################

# bcm2708 HWRNG
# Raspberry Pi 2 B (Broadcom BCM2836 SoC)
# US$35.00
# https://www.raspberrypi.org/products/raspberry-pi-2-model-b/
# undocumented
# drivers/char/hw_random/bcm2708-rng.c
# unknown

BCM2708_2:=$(PROJECT)_$(TARGET)_bcm2708

$(BCM2708_2):	/dev/hwrng
	mkdir -p $(BCM2708_2)
	( dd if=/dev/hwrng | scattergun.sh $(BCM2708_2) ) > $(BCM2708_2)/scattergun.log 2>&1

################################################################################
# "Shortcake"
# Raspberry Pi 3 Model B v1.2
# Broadcom BCM2837 Cortex-A53 ARMv7 x4
# Raspbian (Debian) 8.0
# Linux 4.1.19
# gcc 4.9.2
################################################################################

TARGET=shortcake

################################################################################

# bcm2708 HWRNG
# Raspberry Pi 3 B (Broadcom BCM2837 SoC)
# US$35.00
# https://www.raspberrypi.org/products/raspberry-pi-3-model-b/
# undocumented
# drivers/char/hw_random/bcm2708-rng.c
# unknown

BCM2708_3:=$(PROJECT)_$(TARGET)_bcm2708

$(BCM2708_3):	/dev/hwrng
	mkdir -p $(BCM2708_3)
	( dd if=/dev/hwrng | scattergun.sh $(BCM2708_3) ) > $(BCM2708_3)/scattergun.log 2>&1

################################################################################
# "Mercury"
# Dell OptiPlex 7040
# Intel Core i7-6700T 2.8GHz x8
# Ubuntu 14.04.4 "trusty"
# Linux 4.2.0
# gcc 4.8.4
################################################################################

TARGET=mercury

################################################################################

# TrueRNG
# ublt.it
# US$49.95
# http://ubld.it/products/truerng-hardware-random-number-generator/
# 350Kbps
# USB
# semiconductor avalanche effect

TRUERNG:=$(PROJECT)_$(TARGET)_TrueRNG

$(TRUERNG):	/dev/TrueRNG
	mkdir -p $(TRUERNG)
	( dd if=/dev/TrueRNG | scattergun.sh $(TRUERNG) ) > $(TRUERNG)/scattergun.log 2>&1

################################################################################

# NeuG
# GNU Press
# US$50.00
# https://shop.fsf.org/storage-devices/neug-usb-true-random-number-generator
# N/A
# USB
# ADC noise

NEUG:=$(PROJECT)_$(TARGET)_NeuG

$(NEUG):	/dev/NeuG
	mkdir -p $(NEUG)
	( dd if=/dev/NeuG | scattergun.sh $(NEUG) ) > $(NEUG)/scattergun.log 2>&1

.PHONY: NeuG

################################################################################

# NeuG
# GNU Press
# US$50.00
# https://shop.fsf.org/storage-devices/neug-usb-true-random-number-generator
# N/A
# USB
# ADC noise

NEUG=scattergun_mercury_NeuG

NeuG:	/dev/NeuG
	mkdir -p $(NEUG)
	( dd if=/dev/NeuG | scattergun.sh $(NEUG) ) > $(NEUG)/scattergun.log 2>&1

.PHONY: NeuG

################################################################################

# rdrand Deterministic Random Bit Generator (DRBG)
# Intel Ivy Bridge family
# N/A
# https://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide
# 800MBps
# arch/x86/include/asm/archrandom.h
# AES-CBC-MAC, NIST SP800-90A compliant, thermal noise

RDRAND:=$(PROJECT)_$(TARGET)_rdrand

$(RDRAND):	$(OUT)/seventool
	mkdir -p $(RDRAND)
	( seventool -v -R -r -c | scattergun.sh $(RDRAND) ) > $(RDRAND)/scattergun.log 2>&1

################################################################################

# rdseed Enhanced Non-deterministic Random Number Generator (ENRNG)
# Intel Broadwell family
# N/A
# https://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide
# N/A
# arch/x86/include/asm/archrandom.h
# NIST SP800-90B and C compliant, thermal noise

RDSEED:=$(PROJECT)_$(TARGET)_rdseed

$(RDSEED):	$(OUT)/seventool
	mkdir -p $(RDSEED)
	( seventool -v -S -c | scattergun.sh $(RDSEED) ) > $(RDSEED)/scattergun.log 2>&1

################################################################################

FAIL:=$(PROJECT)_$(TARGET)_fail

$(FAIL):	$(OUT)/seventool
	mkdir -p $(FAIL)
	( seventool -v | scattergun.sh $(FAIL) ) > $(FAIL)/scattergun.log 2>&1

################################################################################

CMRAND48:=$(PROJECT)_$(TARGET)_cmrand48

$(CMRAND48):	$(OUT)/cmrand48
	mkdir -p $(CMRAND48)
	( cmrand48 | scattergun.sh $(CMRAND48) ) > $(CMRAND48)/scattergun.log 2>&1

################################################################################

CRANDOM:=$(PROJECT)_$(TARGET)_crandom

$(CRANDOM):	$(OUT)/crandom
	mkdir -p $(CRANDOM)
	( crandom | scattergun.sh $(CRANDOM) ) > $(CRANDOM)/scattergun.log 2>&1

################################################################################

ZEROS:=$(PROJECT)_$(TARGET)_zeros

$(ZEROS):	$(OUT)/bytes
	mkdir -p $(ZEROS)
	( bytes 0x00 | scattergun.sh $(ZEROS) ) > $(ZEROS)/scattergun.log 2>&1

################################################################################
